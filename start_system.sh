#!/bin/bash

# =============================================================================
# CLIMATE ASSISTANT - GUIA DE EXECU√á√ÉO COMPLETO
# Comandos em ordem para executar o sistema corretamente
# =============================================================================

echo "üåç CLIMATE ASSISTANT - GUIA DE EXECU√á√ÉO"
echo "========================================"

# Fun√ß√£o para verificar se um comando foi executado com sucesso
check_status() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå $1 - FALHOU!"
        exit 1
    fi
}

# Fun√ß√£o para verificar se um processo est√° rodando na porta
port_in_use() {
    lsof -i:$1 >/dev/null 2>&1
}

echo ""
echo "üìã ETAPA 1: PREPARA√á√ÉO DO AMBIENTE"
echo "----------------------------------"

echo "1.1 Navegando para o diret√≥rio correto..."
cd /home/marinhofn/tributouro/tributouro/backend
check_status "Navega√ß√£o para diret√≥rio backend"

echo "1.2 Verificando depend√™ncias Python..."
if python3 -c "import flask, langchain" >/dev/null 2>&1; then
    echo "‚úÖ Depend√™ncias b√°sicas instaladas"
else
    echo "üîÑ Instalando depend√™ncias..."
    pip install -r requirements.txt
    check_status "Instala√ß√£o de depend√™ncias"
fi

echo ""
echo "üìã ETAPA 2: VERIFICA√á√ÉO DO OLLAMA"
echo "---------------------------------"

echo "2.1 Verificando se Ollama est√° instalado..."
if command -v ollama >/dev/null 2>&1; then
    echo "‚úÖ Ollama est√° instalado"
else
    echo "‚ùå Ollama n√£o encontrado!"
    echo "   Instale em: https://ollama.ai/"
    exit 1
fi

echo "2.2 Verificando se Ollama est√° rodando..."
if ollama list >/dev/null 2>&1; then
    echo "‚úÖ Ollama est√° rodando"
else
    echo "üöÄ Iniciando Ollama..."
    echo "   Execute em outro terminal: ollama serve"
    echo "   Aguardando 5 segundos..."
    sleep 5
fi

echo "2.3 Verificando modelo llama3.1:8b..."
if ollama list | grep -q "llama3.1:8b"; then
    echo "‚úÖ Modelo llama3.1:8b dispon√≠vel"
else
    echo "üì• Baixando modelo llama3.1:8b..."
    ollama pull llama3.1:8b
    check_status "Download do modelo"
fi

echo ""
echo "üìã ETAPA 3: PROCESSAMENTO DE DOCUMENTOS"
echo "---------------------------------------"

echo "3.1 Verificando vector store existente..."
if [ -f "data/vector_store/faiss_index/index.faiss" ]; then
    echo "‚úÖ Vector store encontrado"
    echo "   Deseja reconstruir? (s/N)"
    read -r rebuild
    if [[ $rebuild =~ ^[Ss]$ ]]; then
        echo "üîÑ Reconstruindo vector store com PDFs..."
        python process_pdfs.py rebuild
        check_status "Reconstru√ß√£o do vector store"
    fi
else
    echo "üîÑ Criando vector store inicial..."
    python process_pdfs.py rebuild
    check_status "Cria√ß√£o do vector store"
fi

echo "3.2 Testando carregamento de PDFs..."
python process_pdfs.py test
check_status "Teste de carregamento de PDFs"

echo ""
echo "üìã ETAPA 4: INICIALIZA√á√ÉO DO SERVIDOR"
echo "-------------------------------------"

echo "4.1 Verificando se porta 5001 est√° livre..."
if port_in_use 5001; then
    echo "‚ö†Ô∏è Porta 5001 em uso, matando processo anterior..."
    pkill -f "python main.py app" || true
    sleep 2
fi

echo "4.2 Iniciando servidor Flask..."
echo "   Servidor ser√° iniciado na porta 5001"
echo "   Para parar: Ctrl+C"
echo "   URL do frontend: http://localhost:5001/"
echo ""

# Iniciar servidor
API_PORT=5001 python main.py app