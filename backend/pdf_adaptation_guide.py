#!/usr/bin/env python3
"""
Documenta√ß√£o da Adapta√ß√£o para PDFs Locais
Climate Assistant - Suporte a PDFs na pasta data/documents/
"""

print("""
üåç CLIMATE ASSISTANT - ADAPTA√á√ÉO PARA PDFs LOCAIS
=================================================

‚úÖ MODIFICA√á√ïES IMPLEMENTADAS:

1. üìÅ Corre√ß√£o do caminho de documentos:
   - Corrigido DOCUMENTS_DIR em src/config.py
   - Agora aponta para: backend/data/documents/

2. üîß Novo m√©todo _load_local_pdfs():
   - Escaneia automaticamente a pasta data/documents/
   - Carrega todos os arquivos *.pdf encontrados
   - Preserva informa√ß√µes de p√°gina e metadados

3. üìä Metadados aprimorados para PDFs:
   - source: Nome do arquivo sem extens√£o
   - type: 'local_pdf'
   - page_number: N√∫mero da p√°gina (1-indexado)
   - file_path: Caminho completo do arquivo
   - file_name: Nome do arquivo original

4. üîÑ Vector store reconstru√≠do:
   - Inclui documentos de websites (4 documentos)
   - Inclui PDFs locais (186 p√°ginas do IPCC AR6 SYR)
   - Total: 902 chunks indexados

üìã COMO USAR:

1. Adicione PDFs na pasta:
   backend/data/documents/

2. Execute o reprocessamento:
   cd backend && python process_pdfs.py rebuild

3. Reinicie o servidor:
   pkill -f "python main.py app"
   API_PORT=5001 python main.py app

4. Force o reload do sistema:
   curl -X POST http://localhost:5001/reload

üìä STATUS ATUAL:
""")

# Verificar arquivos PDF
from pathlib import Path
import sys
import os

# Add backend directory to Python path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

try:
    from src.config import DOCUMENTS_DIR, VECTOR_STORE_DIR
    
    # Check PDFs
    pdf_files = list(DOCUMENTS_DIR.glob("*.pdf"))
    print(f"üìÑ PDFs encontrados: {len(pdf_files)}")
    for pdf in pdf_files:
        size_mb = pdf.stat().st_size / (1024*1024)
        print(f"   - {pdf.name} ({size_mb:.1f} MB)")
    
    # Check vector store
    faiss_index = VECTOR_STORE_DIR / "faiss_index"
    if faiss_index.exists():
        index_file = faiss_index / "index.faiss"
        pkl_file = faiss_index / "index.pkl"
        if index_file.exists() and pkl_file.exists():
            index_size = index_file.stat().st_size / (1024*1024)
            pkl_size = pkl_file.stat().st_size / (1024*1024)
            print(f"‚úÖ Vector store: {index_size:.1f} MB + {pkl_size:.1f} MB")
        else:
            print("‚ùå Vector store incompleto")
    else:
        print("‚ùå Vector store n√£o encontrado")
        
except Exception as e:
    print(f"‚ùå Erro ao verificar status: {e}")

print("""
üß™ TESTES DISPON√çVEIS:

# Testar carregamento de PDFs
python process_pdfs.py test

# Reconstruir vector store
python process_pdfs.py rebuild

# Testar busca
python process_pdfs.py search

# Processo completo
python process_pdfs.py full

üîç VERIFICA√á√ÉO DA API:

# Health check
curl http://localhost:5001/health

# Reload sistema
curl -X POST http://localhost:5001/reload

# Busca direta
curl -X POST http://localhost:5001/search \\
  -H "Content-Type: application/json" \\
  -d '{"query":"Synthesis Report"}'

# Consulta completa
curl -X POST http://localhost:5001/get_response \\
  -H "Content-Type: application/json" \\
  -d '{"messages":[{"role":"user","content":"IPCC AR6 principais conclus√µes"}]}'

üìö EXEMPLOS DE PDFs SUPORTADOS:
- Relat√≥rios IPCC
- Documentos cient√≠ficos sobre clima
- Papers acad√™micos
- Relat√≥rios governamentais

‚ö†Ô∏è LIMITA√á√ïES:
- PDFs devem estar em texto (n√£o imagens escaneadas)
- Tamanho recomendado: at√© 50MB por PDF
- Formatos suportados: PDF padr√£o

üéØ PR√ìXIMOS PASSOS:
1. Adicionar mais PDFs na pasta data/documents/
2. Executar rebuild quando necess√°rio
3. Testar consultas espec√≠ficas aos PDFs
4. Monitorar performance com mais documentos

""")